// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.25.3
// source: detect.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	DetectService_CreateSession_FullMethodName      = "/pb.DetectService/CreateSession"
	DetectService_GetAllSessionDesc_FullMethodName  = "/pb.DetectService/GetAllSessionDesc"
	DetectService_GetSessionDescByID_FullMethodName = "/pb.DetectService/GetSessionDescByID"
	DetectService_StopDetect_FullMethodName         = "/pb.DetectService/StopDetect"
	DetectService_ContinueDetect_FullMethodName     = "/pb.DetectService/ContinueDetect"
	DetectService_RemoveSession_FullMethodName      = "/pb.DetectService/RemoveSession"
)

// DetectServiceClient is the client API for DetectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DetectServiceClient interface {
	CreateSession(ctx context.Context, in *CreateSessionReq, opts ...grpc.CallOption) (*SessionDesc, error)
	GetAllSessionDesc(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AllSessionDescResp, error)
	GetSessionDescByID(ctx context.Context, in *SessionIDReq, opts ...grpc.CallOption) (*GetSessionDescByIDResp, error)
	StopDetect(ctx context.Context, in *SessionIDReq, opts ...grpc.CallOption) (*GenericResp, error)
	ContinueDetect(ctx context.Context, in *SessionIDReq, opts ...grpc.CallOption) (*GenericResp, error)
	RemoveSession(ctx context.Context, in *SessionIDReq, opts ...grpc.CallOption) (*GenericResp, error)
}

type detectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDetectServiceClient(cc grpc.ClientConnInterface) DetectServiceClient {
	return &detectServiceClient{cc}
}

func (c *detectServiceClient) CreateSession(ctx context.Context, in *CreateSessionReq, opts ...grpc.CallOption) (*SessionDesc, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionDesc)
	err := c.cc.Invoke(ctx, DetectService_CreateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detectServiceClient) GetAllSessionDesc(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AllSessionDescResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllSessionDescResp)
	err := c.cc.Invoke(ctx, DetectService_GetAllSessionDesc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detectServiceClient) GetSessionDescByID(ctx context.Context, in *SessionIDReq, opts ...grpc.CallOption) (*GetSessionDescByIDResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSessionDescByIDResp)
	err := c.cc.Invoke(ctx, DetectService_GetSessionDescByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detectServiceClient) StopDetect(ctx context.Context, in *SessionIDReq, opts ...grpc.CallOption) (*GenericResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericResp)
	err := c.cc.Invoke(ctx, DetectService_StopDetect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detectServiceClient) ContinueDetect(ctx context.Context, in *SessionIDReq, opts ...grpc.CallOption) (*GenericResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericResp)
	err := c.cc.Invoke(ctx, DetectService_ContinueDetect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detectServiceClient) RemoveSession(ctx context.Context, in *SessionIDReq, opts ...grpc.CallOption) (*GenericResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericResp)
	err := c.cc.Invoke(ctx, DetectService_RemoveSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DetectServiceServer is the server API for DetectService service.
// All implementations must embed UnimplementedDetectServiceServer
// for forward compatibility
type DetectServiceServer interface {
	CreateSession(context.Context, *CreateSessionReq) (*SessionDesc, error)
	GetAllSessionDesc(context.Context, *Empty) (*AllSessionDescResp, error)
	GetSessionDescByID(context.Context, *SessionIDReq) (*GetSessionDescByIDResp, error)
	StopDetect(context.Context, *SessionIDReq) (*GenericResp, error)
	ContinueDetect(context.Context, *SessionIDReq) (*GenericResp, error)
	RemoveSession(context.Context, *SessionIDReq) (*GenericResp, error)
	mustEmbedUnimplementedDetectServiceServer()
}

// UnimplementedDetectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDetectServiceServer struct {
}

func (UnimplementedDetectServiceServer) CreateSession(context.Context, *CreateSessionReq) (*SessionDesc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedDetectServiceServer) GetAllSessionDesc(context.Context, *Empty) (*AllSessionDescResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSessionDesc not implemented")
}
func (UnimplementedDetectServiceServer) GetSessionDescByID(context.Context, *SessionIDReq) (*GetSessionDescByIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionDescByID not implemented")
}
func (UnimplementedDetectServiceServer) StopDetect(context.Context, *SessionIDReq) (*GenericResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopDetect not implemented")
}
func (UnimplementedDetectServiceServer) ContinueDetect(context.Context, *SessionIDReq) (*GenericResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContinueDetect not implemented")
}
func (UnimplementedDetectServiceServer) RemoveSession(context.Context, *SessionIDReq) (*GenericResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSession not implemented")
}
func (UnimplementedDetectServiceServer) mustEmbedUnimplementedDetectServiceServer() {}

// UnsafeDetectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DetectServiceServer will
// result in compilation errors.
type UnsafeDetectServiceServer interface {
	mustEmbedUnimplementedDetectServiceServer()
}

func RegisterDetectServiceServer(s grpc.ServiceRegistrar, srv DetectServiceServer) {
	s.RegisterService(&DetectService_ServiceDesc, srv)
}

func _DetectService_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectServiceServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DetectService_CreateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectServiceServer).CreateSession(ctx, req.(*CreateSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DetectService_GetAllSessionDesc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectServiceServer).GetAllSessionDesc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DetectService_GetAllSessionDesc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectServiceServer).GetAllSessionDesc(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DetectService_GetSessionDescByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectServiceServer).GetSessionDescByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DetectService_GetSessionDescByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectServiceServer).GetSessionDescByID(ctx, req.(*SessionIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DetectService_StopDetect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectServiceServer).StopDetect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DetectService_StopDetect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectServiceServer).StopDetect(ctx, req.(*SessionIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DetectService_ContinueDetect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectServiceServer).ContinueDetect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DetectService_ContinueDetect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectServiceServer).ContinueDetect(ctx, req.(*SessionIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DetectService_RemoveSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectServiceServer).RemoveSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DetectService_RemoveSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectServiceServer).RemoveSession(ctx, req.(*SessionIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DetectService_ServiceDesc is the grpc.ServiceDesc for DetectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DetectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.DetectService",
	HandlerType: (*DetectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _DetectService_CreateSession_Handler,
		},
		{
			MethodName: "GetAllSessionDesc",
			Handler:    _DetectService_GetAllSessionDesc_Handler,
		},
		{
			MethodName: "GetSessionDescByID",
			Handler:    _DetectService_GetSessionDescByID_Handler,
		},
		{
			MethodName: "StopDetect",
			Handler:    _DetectService_StopDetect_Handler,
		},
		{
			MethodName: "ContinueDetect",
			Handler:    _DetectService_ContinueDetect_Handler,
		},
		{
			MethodName: "RemoveSession",
			Handler:    _DetectService_RemoveSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "detect.proto",
}
